// <auto-generated />
using System;
using System.Collections.Generic;
using DSEU.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DSEU.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210322091042_TerrUnitNameParentIdAndTypeNameIsUniq")]
    partial class TerrUnitNameParentIdAndTypeNameIsUniq
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("DSEU.Domain.Entities.AppMigrationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("InstalledVersion")
                        .HasColumnType("text");

                    b.Property<string>("MigrationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppMigrationHistory");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlphaCode")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("FractionName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NumericCode")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ParentId", "TypeName")
                        .IsUnique();

                    b.ToTable("TerritorialUnit");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Locality");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LocalityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Village");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.OrganizationalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("OrganizationalUnit");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateOfAppointment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfDismissal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("OrganizationalUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("Name");

                    b.HasIndex("OrganizationalUnitId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.UserLocality", b =>
                {
                    b.Property<int>("LocalityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LocalityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocality");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Basis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RealEstateRightId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateRightId");

                    b.ToTable("Basis");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Basis");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.RealEstateRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RealEstateId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewResult")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StatementDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("RealEstateId");

                    b.ToTable("RealEstateRight");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RealEstateRight");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("AcceptedDocuments")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Decision")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<List<string>>("IssuedDocuments")
                        .HasColumnType("jsonb");

                    b.Property<int>("LocalityId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<string>("RealEstate")
                        .HasColumnType("text");

                    b.Property<int?>("RealEstateRightId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.HasIndex("RealEstateRightId");

                    b.HasIndex("UserId");

                    b.ToTable("Statement");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstates.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<decimal?>("CadastralCost")
                        .HasColumnType("numeric");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DealCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("RealEstate");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RealEstate");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.SubjectsOfRights.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("IdentityDocumentType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("Registration")
                        .HasColumnType("text");

                    b.Property<int>("StatementId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatementId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatementId")
                        .IsUnique();

                    b.HasIndex("StatementId1");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Deal", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstateRights.Basis");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasIndex("CurrencyId");

                    b.HasDiscriminator().HasValue("Deal");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.LawEstablishingDocument", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstateRights.Basis");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LawEstablishingDocument");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.SpecifyingDocument", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstateRights.Basis");

                    b.HasDiscriminator().HasValue("SpecifyingDocument");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.RealEstateOwnRight", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstateRights.RealEstateRight");

                    b.HasDiscriminator().HasValue("RealEstateOwnRight");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstates.Building", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstates.RealEstate");

                    b.Property<int?>("AboveGroundFloorsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("integer");

                    b.Property<double?>("CommonSquare")
                        .HasColumnType("double precision");

                    b.Property<int?>("Flat")
                        .HasColumnType("integer");

                    b.Property<int?>("FlatTotal")
                        .HasColumnType("integer");

                    b.Property<string>("InvertarNumber")
                        .HasColumnType("text");

                    b.Property<double?>("LiveSquare")
                        .HasColumnType("double precision");

                    b.Property<int?>("RoomTotal")
                        .HasColumnType("integer");

                    b.Property<int?>("UndergroundFloorsCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstates.Land", b =>
                {
                    b.HasBaseType("DSEU.Domain.Entities.RealEstates.RealEstate");

                    b.Property<string>("CadastralNumber")
                        .HasColumnType("text");

                    b.Property<double>("Square")
                        .HasColumnType("double precision");

                    b.Property<string>("VirtualCadastralNumber")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Land");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.District", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.District", "District")
                        .WithMany("Localities")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Region", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Village", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", "Locality")
                        .WithMany("Villages")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locality");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.OrganizationalUnit", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.OurOrganization.OrganizationalUnit", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.User", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.OurOrganization.JobTitle", "JobTitle")
                        .WithMany("Users")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DSEU.Domain.Entities.OurOrganization.OrganizationalUnit", "OrganizationalUnit")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationalUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("JobTitle");

                    b.Navigation("OrganizationalUnit");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.UserLocality", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSEU.Domain.Entities.OurOrganization.User", "User")
                        .WithMany("Localities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Basis", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.RealEstateRights.RealEstateRight", "RealEstateRight")
                        .WithMany("Documents")
                        .HasForeignKey("RealEstateRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealEstateRight");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.RealEstateRight", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.SubjectsOfRights.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId");

                    b.HasOne("DSEU.Domain.Entities.RealEstates.RealEstate", "RealEstate")
                        .WithMany("Rights")
                        .HasForeignKey("RealEstateId");

                    b.Navigation("Applicant");

                    b.Navigation("RealEstate");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Statement", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", "Locality")
                        .WithMany()
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSEU.Domain.Entities.RealEstateRights.RealEstateRight", "RealEstateRight")
                        .WithMany()
                        .HasForeignKey("RealEstateRightId");

                    b.HasOne("DSEU.Domain.Entities.OurOrganization.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Locality");

                    b.Navigation("RealEstateRight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstates.RealEstate", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.SubjectsOfRights.Applicant", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.RealEstateRights.Statement", "Statement")
                        .WithOne("Applicant")
                        .HasForeignKey("DSEU.Domain.Entities.SubjectsOfRights.Applicant", "StatementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DSEU.Domain.Entities.RealEstateRights.Statement", null)
                        .WithMany("Representatives")
                        .HasForeignKey("StatementId1");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Deal", b =>
                {
                    b.HasOne("DSEU.Domain.Entities.Commons.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.District", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Locality", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.Commons.TerritorialUnitOneToManyPrinciple.Region", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.JobTitle", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.OrganizationalUnit", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.OurOrganization.User", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.RealEstateRight", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstateRights.Statement", b =>
                {
                    b.Navigation("Applicant");

                    b.Navigation("Representatives");
                });

            modelBuilder.Entity("DSEU.Domain.Entities.RealEstates.RealEstate", b =>
                {
                    b.Navigation("Rights");
                });
#pragma warning restore 612, 618
        }
    }
}
